/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/credentials/issue": {
    post: operations["credential_issue"];
  };
  "/ready": {
    get: operations["server_ready"];
  };
  "/shutdown": {
    get: operations["server_shutdown"];
  };
  "/": {
    get: operations["identify_self"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CredentialIssuanceRequest: {
      credential: components["schemas"]["CredentialIssuanceRequestCredential"];
      options: components["schemas"]["CredentialIssuanceRequestOptions"];
    };
    CredentialIssuanceRequestCredential: {
      "@context": string[];
      id: string;
      type: string[];
      issuer: components["schemas"]["CredentialIssuer"];
      issuanceDate: string;
      expirationDate: string;
      credentialSubject: components["schemas"]["CredentialSubject"];
    };
    CredentialIssuanceRequestOptions: {
      created: string;
      challenge: string;
      domain: string;
      credentialStatus: components["schemas"]["CredentialStatus"];
    };
    CredentialIssuer: {
      id: string;
    };
    CredentialSubject: {
      [key: string]: unknown;
    };
    CredentialStatus: {
      type: string;
    };
    CredentialIssuanceResponse: {
      verifiableCredential: components["schemas"]["VerifiableCredential"];
    };
    VerifiableCredential: {
      "@context": string[];
      id: string;
      type: string[];
      issuer: components["schemas"]["CredentialIssuer"];
      issuanceDate: string;
      expirationDate: string;
      credentialSubject: components["schemas"]["CredentialSubject"];
      proof: components["schemas"]["CredentialProof"];
    };
    CredentialProof: {
      type: string;
      created: string;
      challenge: string;
      domain: string;
      nonce: string;
      verificationMethod: string;
      proofPurpose: string;
      jws: string;
      proofValue: string;
    };
    TestServerID: {
      name: string;
      language: string;
      url: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  credential_issue: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CredentialIssuanceRequest"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["CredentialIssuanceResponse"];
        };
      };
    };
  };
  server_ready: {
    responses: {
      /** @description server is ready */
      200: {
        content: never;
      };
    };
  };
  server_shutdown: {
    responses: {
      /** @description server will shut down */
      204: {
        content: never;
      };
    };
  };
  identify_self: {
    responses: {
      /** @description information about the test server */
      200: {
        content: {
          "application/json": components["schemas"]["TestServerID"];
        };
      };
    };
  };
}
